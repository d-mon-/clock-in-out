//----------------------
// <auto-generated>
//     Generated using the NSwag toolchain v13.20.0.0 (NJsonSchema v11.0.0.0 (Newtonsoft.Json v13.0.0.0)) (http://NSwag.org)
// </auto-generated>
//----------------------

/* tslint:disable */
/* eslint-disable */
// ReSharper disable InconsistentNaming
import * as Types from '../axios-client';
import { useQuery, useMutation } from 'react-query';
import type { UseQueryResult, QueryFunctionContext, UseQueryOptions, QueryClient, QueryKey, MutationKey, UseMutationOptions, UseMutationResult, QueryMeta, MutationMeta } from 'react-query';
import { trimArrayEnd, isParameterObject, getBaseUrl, addMetaToOptions } from './helpers';
import type { QueryMetaContextValue } from 'react-query-swagger';
import { QueryMetaContext } from 'react-query-swagger';
import { useContext } from 'react';
import { UserRecordsControllerClient as UserRecordsControllerClientClass } from '../axios-client';
import { createClient, getClientFactory } from './helpers';

export const Client = () => getClientFactory()(UserRecordsControllerClientClass);
import type { AxiosRequestConfig } from 'axios';


export type FindOneUserRecordsControllerQueryParameters = {
  id: string ;
}

export type UpdateUserRecordsControllerQueryParameters = {
  id: string ;
}

export type RemoveUserRecordsControllerQueryParameters = {
  id: string ;
}

export function createUrl(): string {
  let url_ = getBaseUrl() + "/user-records";
  url_ = url_.replace(/[?&]$/, "");
  return url_;
}

export function createMutationKey(): MutationKey {
  return trimArrayEnd([
      'UserRecordsControllerClient',
      'create',
    ]);
}

export function useCreateMutation<TContext>(options?: Omit<UseMutationOptions<Types.UserRecord, unknown, Types.CreateUserRecordDto, TContext>, 'mutationKey' | 'mutationFn'>): UseMutationResult<Types.UserRecord, unknown, Types.CreateUserRecordDto, TContext> {
  const key = createMutationKey();
  
  const metaContext = useContext(QueryMetaContext);
  options = addMetaToOptions(options, metaContext);
  
  return useMutation({
    ...options,
    mutationFn: (body: Types.CreateUserRecordDto) => Client().create(body),
    mutationKey: key,
  });
}
  
export function findAllUrl(): string {
  let url_ = getBaseUrl() + "/user-records";
  url_ = url_.replace(/[?&]$/, "");
  return url_;
}

let findAllDefaultOptions: Omit<UseQueryOptions<Types.UserRecord[], unknown, Types.UserRecord[]>, 'queryKey' | 'queryFn'> & Partial<Pick<UseQueryOptions<Types.UserRecord[], unknown, Types.UserRecord[]>, 'queryFn'>> = {
};
export function getFindAllDefaultOptions() {
  return findAllDefaultOptions;
};
export function setFindAllDefaultOptions(options: typeof findAllDefaultOptions) {
  findAllDefaultOptions = options;
}

export function findAllQueryKey(): QueryKey;
export function findAllQueryKey(...params: any[]): QueryKey {
  return trimArrayEnd([
      'UserRecordsControllerClient',
      'findAll',
    ]);
}
export function __findAll(context: QueryFunctionContext, axiosConfig?: AxiosRequestConfig | undefined) {
  return Client().findAll(
);
}

export function useFindAllQuery<TSelectData = Types.UserRecord[], TError = unknown>(options?: Omit<UseQueryOptions<Types.UserRecord[], TError, TSelectData>, 'queryKey'>, axiosConfig?: Partial<AxiosRequestConfig>): UseQueryResult<TSelectData, TError>;
export function useFindAllQuery<TSelectData = Types.UserRecord[], TError = unknown>(...params: any []): UseQueryResult<TSelectData, TError> {
  let options: UseQueryOptions<Types.UserRecord[], TError, TSelectData> | undefined = undefined;
  let axiosConfig: AxiosRequestConfig |undefined = undefined;
  

  options = params[0] as any;
  axiosConfig = params[1] as any;

  const metaContext = useContext(QueryMetaContext);
  options = addMetaToOptions(options, metaContext);

  return useQuery<Types.UserRecord[], TError, TSelectData>({
    queryFn: axiosConfig ? (context) => __findAll(context, axiosConfig) : __findAll,
    queryKey: findAllQueryKey(),
    ...findAllDefaultOptions as unknown as Omit<UseQueryOptions<Types.UserRecord[], TError, TSelectData>, 'queryKey'>,
    ...options,
  });
}

export function setFindAllData(queryClient: QueryClient, updater: (data: Types.UserRecord[] | undefined) => Types.UserRecord[], ) {
  queryClient.setQueryData(findAllQueryKey(),
    updater
  );
}

export function setFindAllDataByQueryId(queryClient: QueryClient, queryKey: QueryKey, updater: (data: Types.UserRecord[] | undefined) => Types.UserRecord[]) {
  queryClient.setQueryData(queryKey, updater);
}
    
export function findOneUrl(id: string): string {
  let url_ = getBaseUrl() + "/user-records/{id}";
if (id === undefined || id === null)
  throw new Error("The parameter 'id' must be defined.");
url_ = url_.replace("{id}", encodeURIComponent("" + id));
  url_ = url_.replace(/[?&]$/, "");
  return url_;
}

let findOneDefaultOptions: Omit<UseQueryOptions<string, unknown, string>, 'queryKey' | 'queryFn'> & Partial<Pick<UseQueryOptions<string, unknown, string>, 'queryFn'>> = {
};
export function getFindOneDefaultOptions() {
  return findOneDefaultOptions;
};
export function setFindOneDefaultOptions(options: typeof findOneDefaultOptions) {
  findOneDefaultOptions = options;
}

export function findOneQueryKey(id: string): QueryKey;
export function findOneQueryKey(...params: any[]): QueryKey {
  if (params.length === 1 && isParameterObject(params[0])) {
    const { id,  } = params[0] as FindOneUserRecordsControllerQueryParameters;

    return trimArrayEnd([
        'UserRecordsControllerClient',
        'findOne',
        id as any,
      ]);
  } else {
    return trimArrayEnd([
        'UserRecordsControllerClient',
        'findOne',
        ...params
      ]);
  }
}
export function __findOne(context: QueryFunctionContext, axiosConfig?: AxiosRequestConfig | undefined) {
  return Client().findOne(
      context.queryKey[2] as string);
}

export function useFindOneQuery<TSelectData = string, TError = unknown>(dto: FindOneUserRecordsControllerQueryParameters, options?: Omit<UseQueryOptions<string, TError, TSelectData>, 'queryKey'>, axiosConfig?: Partial<AxiosRequestConfig>): UseQueryResult<TSelectData, TError>;

export function useFindOneQuery<TSelectData = string, TError = unknown>(id: string, options?: Omit<UseQueryOptions<string, TError, TSelectData>, 'queryKey'>, axiosConfig?: Partial<AxiosRequestConfig>): UseQueryResult<TSelectData, TError>;
export function useFindOneQuery<TSelectData = string, TError = unknown>(...params: any []): UseQueryResult<TSelectData, TError> {
  let options: UseQueryOptions<string, TError, TSelectData> | undefined = undefined;
  let axiosConfig: AxiosRequestConfig |undefined = undefined;
  let id: any = undefined;
  
  if (params.length > 0) {
    if (isParameterObject(params[0])) {
      ({ id,  } = params[0] as FindOneUserRecordsControllerQueryParameters);
      options = params[1];
      axiosConfig = params[2];
    } else {
      [id, options, axiosConfig] = params;
    }
  }

  const metaContext = useContext(QueryMetaContext);
  options = addMetaToOptions(options, metaContext);

  return useQuery<string, TError, TSelectData>({
    queryFn: axiosConfig ? (context) => __findOne(context, axiosConfig) : __findOne,
    queryKey: findOneQueryKey(id),
    ...findOneDefaultOptions as unknown as Omit<UseQueryOptions<string, TError, TSelectData>, 'queryKey'>,
    ...options,
  });
}

export function setFindOneData(queryClient: QueryClient, updater: (data: string | undefined) => string, id: string) {
  queryClient.setQueryData(findOneQueryKey(id),
    updater
  );
}

export function setFindOneDataByQueryId(queryClient: QueryClient, queryKey: QueryKey, updater: (data: string | undefined) => string) {
  queryClient.setQueryData(queryKey, updater);
}
    
export function updateUrl(id: string): string {
  let url_ = getBaseUrl() + "/user-records/{id}";
if (id === undefined || id === null)
  throw new Error("The parameter 'id' must be defined.");
url_ = url_.replace("{id}", encodeURIComponent("" + id));
  url_ = url_.replace(/[?&]$/, "");
  return url_;
}

export function updateMutationKey(id: string): MutationKey {
  return trimArrayEnd([
      'UserRecordsControllerClient',
      'update',
      id as any,
    ]);
}

export function useUpdateMutation<TContext>(id: string, options?: Omit<UseMutationOptions<string, unknown, Types.UpdateUserRecordDto, TContext>, 'mutationKey' | 'mutationFn'>): UseMutationResult<string, unknown, Types.UpdateUserRecordDto, TContext> {
  const key = updateMutationKey(id);
  
  const metaContext = useContext(QueryMetaContext);
  options = addMetaToOptions(options, metaContext);
  
  return useMutation({
    ...options,
    mutationFn: (body: Types.UpdateUserRecordDto) => Client().update(id, body),
    mutationKey: key,
  });
}
  
type Update__MutationParameters = UpdateUserRecordsControllerQueryParameters & {
  body: Types.UpdateUserRecordDto;
}

export function useUpdateMutationWithParameters<TContext>(options?: Omit<UseMutationOptions<string, unknown, Update__MutationParameters, TContext>, 'mutationKey' | 'mutationFn'> & { parameters?: UpdateUserRecordsControllerQueryParameters}): UseMutationResult<string, unknown, Update__MutationParameters, TContext> {
  const key = updateMutationKey(options?.parameters?.id!);
  
  const metaContext = useContext(QueryMetaContext);
  options = addMetaToOptions(options, metaContext);
  
return useMutation({
  ...options, 
  mutationFn: (data: Update__MutationParameters) => Client().update(data.id ?? options?.parameters?.id!, data.body),
  mutationKey: key,
});
}
  
export function removeUrl(id: string): string {
  let url_ = getBaseUrl() + "/user-records/{id}";
if (id === undefined || id === null)
  throw new Error("The parameter 'id' must be defined.");
url_ = url_.replace("{id}", encodeURIComponent("" + id));
  url_ = url_.replace(/[?&]$/, "");
  return url_;
}

export function removeMutationKey(id: string): MutationKey {
  return trimArrayEnd([
      'UserRecordsControllerClient',
      'remove',
      id as any,
    ]);
}

export function useRemoveMutation<TContext>(id: string, options?: Omit<UseMutationOptions<string, unknown, void, TContext>, 'mutationKey' | 'mutationFn'>): UseMutationResult<string, unknown, void, TContext> {
  const key = removeMutationKey(id);
  
  const metaContext = useContext(QueryMetaContext);
  options = addMetaToOptions(options, metaContext);
  
  return useMutation({
    ...options,
    mutationFn: () => Client().remove(id),
    mutationKey: key,
  });
}
  
type Remove__MutationParameters = RemoveUserRecordsControllerQueryParameters

export function useRemoveMutationWithParameters<TContext>(options?: Omit<UseMutationOptions<string, unknown, Remove__MutationParameters, TContext>, 'mutationKey' | 'mutationFn'> & { parameters?: RemoveUserRecordsControllerQueryParameters}): UseMutationResult<string, unknown, Remove__MutationParameters, TContext> {
  const key = removeMutationKey(options?.parameters?.id!);
  
  const metaContext = useContext(QueryMetaContext);
  options = addMetaToOptions(options, metaContext);
  
return useMutation({
  ...options, 
  mutationFn: (data: Remove__MutationParameters) => Client().remove(data.id ?? options?.parameters?.id!),
  mutationKey: key,
});
}